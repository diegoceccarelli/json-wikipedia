/**
 * Autogenerated by Avro
 *
 * <p>DO NOT EDIT DIRECTLY
 */
package it.cnr.isti.hpc.wikipedia.article;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Table extends org.apache.avro.specific.SpecificRecordBase
    implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -5550279043146018204L;
  public static final org.apache.avro.Schema SCHEMA$ =
      new org.apache.avro.Schema.Parser()
          .parse(
              "{\"type\":\"record\",\"name\":\"Table\",\"namespace\":\"it.cnr.isti.hpc.wikipedia.article\",\"fields\":[{\"name\":\"title\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"numCols\",\"type\":\"int\",\"default\":0},{\"name\":\"numRows\",\"type\":\"int\",\"default\":0},{\"name\":\"table\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}}}]}");

  public static org.apache.avro.Schema getClassSchema() {
    return SCHEMA$;
  }

  @Deprecated public java.lang.String title;
  @Deprecated public int numCols;
  @Deprecated public int numRows;
  @Deprecated public java.util.List<java.util.List<java.lang.String>> table;

  /**
   * Default constructor. Note that this does not initialize fields to their default values from the
   * schema. If that is desired then one should use <code>newBuilder()</code>.
   */
  public Table() {}

  /**
   * All-args constructor.
   *
   * @param title The new value for title
   * @param numCols The new value for numCols
   * @param numRows The new value for numRows
   * @param table The new value for table
   */
  public Table(
      java.lang.String title,
      java.lang.Integer numCols,
      java.lang.Integer numRows,
      java.util.List<java.util.List<java.lang.String>> table) {
    this.title = title;
    this.numCols = numCols;
    this.numRows = numRows;
    this.table = table;
  }

  public org.apache.avro.Schema getSchema() {
    return SCHEMA$;
  }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
      case 0:
        return title;
      case 1:
        return numCols;
      case 2:
        return numRows;
      case 3:
        return table;
      default:
        throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value = "unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
      case 0:
        title = (java.lang.String) value$;
        break;
      case 1:
        numCols = (java.lang.Integer) value$;
        break;
      case 2:
        numRows = (java.lang.Integer) value$;
        break;
      case 3:
        table = (java.util.List<java.util.List<java.lang.String>>) value$;
        break;
      default:
        throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'title' field.
   *
   * @return The value of the 'title' field.
   */
  public java.lang.String getTitle() {
    return title;
  }

  /**
   * Sets the value of the 'title' field.
   *
   * @param value the value to set.
   */
  public void setTitle(java.lang.String value) {
    this.title = value;
  }

  /**
   * Gets the value of the 'numCols' field.
   *
   * @return The value of the 'numCols' field.
   */
  public java.lang.Integer getNumCols() {
    return numCols;
  }

  /**
   * Sets the value of the 'numCols' field.
   *
   * @param value the value to set.
   */
  public void setNumCols(java.lang.Integer value) {
    this.numCols = value;
  }

  /**
   * Gets the value of the 'numRows' field.
   *
   * @return The value of the 'numRows' field.
   */
  public java.lang.Integer getNumRows() {
    return numRows;
  }

  /**
   * Sets the value of the 'numRows' field.
   *
   * @param value the value to set.
   */
  public void setNumRows(java.lang.Integer value) {
    this.numRows = value;
  }

  /**
   * Gets the value of the 'table' field.
   *
   * @return The value of the 'table' field.
   */
  public java.util.List<java.util.List<java.lang.String>> getTable() {
    return table;
  }

  /**
   * Sets the value of the 'table' field.
   *
   * @param value the value to set.
   */
  public void setTable(java.util.List<java.util.List<java.lang.String>> value) {
    this.table = value;
  }

  /**
   * Creates a new Table RecordBuilder.
   *
   * @return A new Table RecordBuilder
   */
  public static it.cnr.isti.hpc.wikipedia.article.Table.Builder newBuilder() {
    return new it.cnr.isti.hpc.wikipedia.article.Table.Builder();
  }

  /**
   * Creates a new Table RecordBuilder by copying an existing Builder.
   *
   * @param other The existing builder to copy.
   * @return A new Table RecordBuilder
   */
  public static it.cnr.isti.hpc.wikipedia.article.Table.Builder newBuilder(
      it.cnr.isti.hpc.wikipedia.article.Table.Builder other) {
    return new it.cnr.isti.hpc.wikipedia.article.Table.Builder(other);
  }

  /**
   * Creates a new Table RecordBuilder by copying an existing Table instance.
   *
   * @param other The existing instance to copy.
   * @return A new Table RecordBuilder
   */
  public static it.cnr.isti.hpc.wikipedia.article.Table.Builder newBuilder(
      it.cnr.isti.hpc.wikipedia.article.Table other) {
    return new it.cnr.isti.hpc.wikipedia.article.Table.Builder(other);
  }

  /** RecordBuilder for Table instances. */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Table>
      implements org.apache.avro.data.RecordBuilder<Table> {

    private java.lang.String title;
    private int numCols;
    private int numRows;
    private java.util.List<java.util.List<java.lang.String>> table;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     *
     * @param other The existing Builder to copy.
     */
    private Builder(it.cnr.isti.hpc.wikipedia.article.Table.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.title)) {
        this.title = data().deepCopy(fields()[0].schema(), other.title);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.numCols)) {
        this.numCols = data().deepCopy(fields()[1].schema(), other.numCols);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.numRows)) {
        this.numRows = data().deepCopy(fields()[2].schema(), other.numRows);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.table)) {
        this.table = data().deepCopy(fields()[3].schema(), other.table);
        fieldSetFlags()[3] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Table instance
     *
     * @param other The existing instance to copy.
     */
    private Builder(it.cnr.isti.hpc.wikipedia.article.Table other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.title)) {
        this.title = data().deepCopy(fields()[0].schema(), other.title);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.numCols)) {
        this.numCols = data().deepCopy(fields()[1].schema(), other.numCols);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.numRows)) {
        this.numRows = data().deepCopy(fields()[2].schema(), other.numRows);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.table)) {
        this.table = data().deepCopy(fields()[3].schema(), other.table);
        fieldSetFlags()[3] = true;
      }
    }

    /**
     * Gets the value of the 'title' field.
     *
     * @return The value.
     */
    public java.lang.String getTitle() {
      return title;
    }

    /**
     * Sets the value of the 'title' field.
     *
     * @param value The value of 'title'.
     * @return This builder.
     */
    public it.cnr.isti.hpc.wikipedia.article.Table.Builder setTitle(java.lang.String value) {
      validate(fields()[0], value);
      this.title = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
     * Checks whether the 'title' field has been set.
     *
     * @return True if the 'title' field has been set, false otherwise.
     */
    public boolean hasTitle() {
      return fieldSetFlags()[0];
    }

    /**
     * Clears the value of the 'title' field.
     *
     * @return This builder.
     */
    public it.cnr.isti.hpc.wikipedia.article.Table.Builder clearTitle() {
      title = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
     * Gets the value of the 'numCols' field.
     *
     * @return The value.
     */
    public java.lang.Integer getNumCols() {
      return numCols;
    }

    /**
     * Sets the value of the 'numCols' field.
     *
     * @param value The value of 'numCols'.
     * @return This builder.
     */
    public it.cnr.isti.hpc.wikipedia.article.Table.Builder setNumCols(int value) {
      validate(fields()[1], value);
      this.numCols = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
     * Checks whether the 'numCols' field has been set.
     *
     * @return True if the 'numCols' field has been set, false otherwise.
     */
    public boolean hasNumCols() {
      return fieldSetFlags()[1];
    }

    /**
     * Clears the value of the 'numCols' field.
     *
     * @return This builder.
     */
    public it.cnr.isti.hpc.wikipedia.article.Table.Builder clearNumCols() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
     * Gets the value of the 'numRows' field.
     *
     * @return The value.
     */
    public java.lang.Integer getNumRows() {
      return numRows;
    }

    /**
     * Sets the value of the 'numRows' field.
     *
     * @param value The value of 'numRows'.
     * @return This builder.
     */
    public it.cnr.isti.hpc.wikipedia.article.Table.Builder setNumRows(int value) {
      validate(fields()[2], value);
      this.numRows = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
     * Checks whether the 'numRows' field has been set.
     *
     * @return True if the 'numRows' field has been set, false otherwise.
     */
    public boolean hasNumRows() {
      return fieldSetFlags()[2];
    }

    /**
     * Clears the value of the 'numRows' field.
     *
     * @return This builder.
     */
    public it.cnr.isti.hpc.wikipedia.article.Table.Builder clearNumRows() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
     * Gets the value of the 'table' field.
     *
     * @return The value.
     */
    public java.util.List<java.util.List<java.lang.String>> getTable() {
      return table;
    }

    /**
     * Sets the value of the 'table' field.
     *
     * @param value The value of 'table'.
     * @return This builder.
     */
    public it.cnr.isti.hpc.wikipedia.article.Table.Builder setTable(
        java.util.List<java.util.List<java.lang.String>> value) {
      validate(fields()[3], value);
      this.table = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
     * Checks whether the 'table' field has been set.
     *
     * @return True if the 'table' field has been set, false otherwise.
     */
    public boolean hasTable() {
      return fieldSetFlags()[3];
    }

    /**
     * Clears the value of the 'table' field.
     *
     * @return This builder.
     */
    public it.cnr.isti.hpc.wikipedia.article.Table.Builder clearTable() {
      table = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    public Table build() {
      try {
        Table record = new Table();
        record.title =
            fieldSetFlags()[0] ? this.title : (java.lang.String) defaultValue(fields()[0]);
        record.numCols =
            fieldSetFlags()[1] ? this.numCols : (java.lang.Integer) defaultValue(fields()[1]);
        record.numRows =
            fieldSetFlags()[2] ? this.numRows : (java.lang.Integer) defaultValue(fields()[2]);
        record.table =
            fieldSetFlags()[3]
                ? this.table
                : (java.util.List<java.util.List<java.lang.String>>) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter WRITER$ =
      new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override
  public void writeExternal(java.io.ObjectOutput out) throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader READER$ =
      new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override
  public void readExternal(java.io.ObjectInput in) throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }
}
