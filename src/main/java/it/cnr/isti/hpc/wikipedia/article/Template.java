/**
 * Autogenerated by Avro
 *
 * <p>DO NOT EDIT DIRECTLY
 */
package it.cnr.isti.hpc.wikipedia.article;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Template extends org.apache.avro.specific.SpecificRecordBase
    implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -7829322919174673976L;
  public static final org.apache.avro.Schema SCHEMA$ =
      new org.apache.avro.Schema.Parser()
          .parse(
              "{\"type\":\"record\",\"name\":\"Template\",\"namespace\":\"it.cnr.isti.hpc.wikipedia.article\",\"fields\":[{\"name\":\"name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"description\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}}]}");

  public static org.apache.avro.Schema getClassSchema() {
    return SCHEMA$;
  }

  @Deprecated public java.lang.String name;
  @Deprecated public java.util.List<java.lang.String> description;

  /**
   * Default constructor. Note that this does not initialize fields to their default values from the
   * schema. If that is desired then one should use <code>newBuilder()</code>.
   */
  public Template() {}

  /**
   * All-args constructor.
   *
   * @param name The new value for name
   * @param description The new value for description
   */
  public Template(java.lang.String name, java.util.List<java.lang.String> description) {
    this.name = name;
    this.description = description;
  }

  public org.apache.avro.Schema getSchema() {
    return SCHEMA$;
  }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
      case 0:
        return name;
      case 1:
        return description;
      default:
        throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value = "unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
      case 0:
        name = (java.lang.String) value$;
        break;
      case 1:
        description = (java.util.List<java.lang.String>) value$;
        break;
      default:
        throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'name' field.
   *
   * @return The value of the 'name' field.
   */
  public java.lang.String getName() {
    return name;
  }

  /**
   * Sets the value of the 'name' field.
   *
   * @param value the value to set.
   */
  public void setName(java.lang.String value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'description' field.
   *
   * @return The value of the 'description' field.
   */
  public java.util.List<java.lang.String> getDescription() {
    return description;
  }

  /**
   * Sets the value of the 'description' field.
   *
   * @param value the value to set.
   */
  public void setDescription(java.util.List<java.lang.String> value) {
    this.description = value;
  }

  /**
   * Creates a new Template RecordBuilder.
   *
   * @return A new Template RecordBuilder
   */
  public static it.cnr.isti.hpc.wikipedia.article.Template.Builder newBuilder() {
    return new it.cnr.isti.hpc.wikipedia.article.Template.Builder();
  }

  /**
   * Creates a new Template RecordBuilder by copying an existing Builder.
   *
   * @param other The existing builder to copy.
   * @return A new Template RecordBuilder
   */
  public static it.cnr.isti.hpc.wikipedia.article.Template.Builder newBuilder(
      it.cnr.isti.hpc.wikipedia.article.Template.Builder other) {
    return new it.cnr.isti.hpc.wikipedia.article.Template.Builder(other);
  }

  /**
   * Creates a new Template RecordBuilder by copying an existing Template instance.
   *
   * @param other The existing instance to copy.
   * @return A new Template RecordBuilder
   */
  public static it.cnr.isti.hpc.wikipedia.article.Template.Builder newBuilder(
      it.cnr.isti.hpc.wikipedia.article.Template other) {
    return new it.cnr.isti.hpc.wikipedia.article.Template.Builder(other);
  }

  /** RecordBuilder for Template instances. */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Template>
      implements org.apache.avro.data.RecordBuilder<Template> {

    private java.lang.String name;
    private java.util.List<java.lang.String> description;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     *
     * @param other The existing Builder to copy.
     */
    private Builder(it.cnr.isti.hpc.wikipedia.article.Template.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.name)) {
        this.name = data().deepCopy(fields()[0].schema(), other.name);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.description)) {
        this.description = data().deepCopy(fields()[1].schema(), other.description);
        fieldSetFlags()[1] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Template instance
     *
     * @param other The existing instance to copy.
     */
    private Builder(it.cnr.isti.hpc.wikipedia.article.Template other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.name)) {
        this.name = data().deepCopy(fields()[0].schema(), other.name);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.description)) {
        this.description = data().deepCopy(fields()[1].schema(), other.description);
        fieldSetFlags()[1] = true;
      }
    }

    /**
     * Gets the value of the 'name' field.
     *
     * @return The value.
     */
    public java.lang.String getName() {
      return name;
    }

    /**
     * Sets the value of the 'name' field.
     *
     * @param value The value of 'name'.
     * @return This builder.
     */
    public it.cnr.isti.hpc.wikipedia.article.Template.Builder setName(java.lang.String value) {
      validate(fields()[0], value);
      this.name = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
     * Checks whether the 'name' field has been set.
     *
     * @return True if the 'name' field has been set, false otherwise.
     */
    public boolean hasName() {
      return fieldSetFlags()[0];
    }

    /**
     * Clears the value of the 'name' field.
     *
     * @return This builder.
     */
    public it.cnr.isti.hpc.wikipedia.article.Template.Builder clearName() {
      name = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
     * Gets the value of the 'description' field.
     *
     * @return The value.
     */
    public java.util.List<java.lang.String> getDescription() {
      return description;
    }

    /**
     * Sets the value of the 'description' field.
     *
     * @param value The value of 'description'.
     * @return This builder.
     */
    public it.cnr.isti.hpc.wikipedia.article.Template.Builder setDescription(
        java.util.List<java.lang.String> value) {
      validate(fields()[1], value);
      this.description = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
     * Checks whether the 'description' field has been set.
     *
     * @return True if the 'description' field has been set, false otherwise.
     */
    public boolean hasDescription() {
      return fieldSetFlags()[1];
    }

    /**
     * Clears the value of the 'description' field.
     *
     * @return This builder.
     */
    public it.cnr.isti.hpc.wikipedia.article.Template.Builder clearDescription() {
      description = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public Template build() {
      try {
        Template record = new Template();
        record.name = fieldSetFlags()[0] ? this.name : (java.lang.String) defaultValue(fields()[0]);
        record.description =
            fieldSetFlags()[1]
                ? this.description
                : (java.util.List<java.lang.String>) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter WRITER$ =
      new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override
  public void writeExternal(java.io.ObjectOutput out) throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader READER$ =
      new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override
  public void readExternal(java.io.ObjectInput in) throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }
}
